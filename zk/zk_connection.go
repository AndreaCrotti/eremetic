package zk

import (
	"github.com/samuel/go-zookeeper/zk"
	"github.com/stretchr/testify/mock"
)

// mockConnection is an autogenerated mock type for the Connection type
type mockConnection struct {
	mock.Mock
}

// Children provides a mock function with given fields: path
func (_m *mockConnection) Children(path string) ([]string, *zk.Stat, error) {
	ret := _m.Called(path)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 *zk.Stat
	if rf, ok := ret.Get(1).(func(string) *zk.Stat); ok {
		r1 = rf(path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zk.Stat)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Close provides a mock function with given fields:
func (_m *mockConnection) Close() {
	_m.Called()
}

// Create provides a mock function with given fields: path, data, flags, acl
func (_m *mockConnection) Create(path string, data []byte, flags int32, acl []zk.ACL) (string, error) {
	ret := _m.Called(path, data, flags, acl)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []byte, int32, []zk.ACL) string); ok {
		r0 = rf(path, data, flags, acl)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte, int32, []zk.ACL) error); ok {
		r1 = rf(path, data, flags, acl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: path, n
func (_m *mockConnection) Delete(path string, n int32) error {
	ret := _m.Called(path, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int32) error); ok {
		r0 = rf(path, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: path
func (_m *mockConnection) Exists(path string) (bool, *zk.Stat, error) {
	ret := _m.Called(path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *zk.Stat
	if rf, ok := ret.Get(1).(func(string) *zk.Stat); ok {
		r1 = rf(path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zk.Stat)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: path
func (_m *mockConnection) Get(path string) ([]byte, *zk.Stat, error) {
	ret := _m.Called(path)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 *zk.Stat
	if rf, ok := ret.Get(1).(func(string) *zk.Stat); ok {
		r1 = rf(path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zk.Stat)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Set provides a mock function with given fields: path, data, version
func (_m *mockConnection) Set(path string, data []byte, version int32) (*zk.Stat, error) {
	ret := _m.Called(path, data, version)

	var r0 *zk.Stat
	if rf, ok := ret.Get(0).(func(string, []byte, int32) *zk.Stat); ok {
		r0 = rf(path, data, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zk.Stat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte, int32) error); ok {
		r1 = rf(path, data, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
